# - SnapReminder V1.0 By Virtu-Al - http://virtu-al.net
#
# Please use the below variables to define your settings before use
#
Add-PSSnapin VMware.VimAutomation.Core
$smtpServer = "LasSMTPInt.active.local"
$MailFrom = "soi_admin@activenetwork.com"
#$VISRV = "MYVISERVER"
 
function Find-User ($username){
   if ($username -ne $null)
   {
      $usr = (($username.split("\"))[1])
      $root = [ADSI]""
      $filter = ("(&(objectCategory=user)(samAccountName=$Usr))")
      $ds = new-object system.DirectoryServices.DirectorySearcher($root,$filter)
      $ds.PageSize = 1000
      $ds.FindOne()
   }
}
 
function Get-SnapshotTree{
   param($tree, $target)
 
   $found = $null
   foreach($elem in $tree){
      if($elem.Snapshot.Value -eq $target.Value){
         $found = $elem
         continue
      }
   }
   if($found -eq $null -and $elem.ChildSnapshotList -ne $null){
      $found = Get-SnapshotTree $elem.ChildSnapshotList $target
   }
 
   return $found
}
 


function Get-SnapshotExtra ($snap){
	$guestName = $snap.VM	# The name of the guest
	$tasknumber = 999		# Window size of the Task collector
	$taskMgr = Get-View TaskManager

	# Create hash table. Each entry is a create snapshot task
	$report = @{}

	$filter = New-Object VMware.Vim.TaskFilterSpec
	$filter.Time = New-Object VMware.Vim.TaskFilterSpecByTime
	$filter.Time.beginTime = (($snap.Created).AddDays(-5))
	$filter.Time.timeType = "startedTime"
	# Added filter to only view for the selected VM entity. Massive speed up.
	# Entity name check could be removed in line 91.
	$filter.Entity = New-Object VMware.Vim.TaskFilterSpecByEntity
    	$filter.Entity.Entity = $snap.VM.ExtensionData.MoRef

	$collectionImpl = Get-View ($taskMgr.CreateCollectorForTasks($filter))

	$dummy = $collectionImpl.RewindCollector
	$collection = $collectionImpl.ReadNextTasks($tasknumber)
	while($collection -ne $null){
		$collection | where {$_.DescriptionId -eq "VirtualMachine.createSnapshot" -and $_.State -eq "success" -and $_.EntityName -eq $guestName} | %{
			$row = New-Object PsObject
			$row | Add-Member -MemberType NoteProperty -Name User -Value $_.Reason.UserName
			$vm = Get-View $_.Entity
			if($vm -ne $null){ 
				$snapshot = Get-SnapshotTree $vm.Snapshot.RootSnapshotList $_.Result
				if($snapshot -ne $null){
					$key = $_.EntityName + "&" + ($snapshot.CreateTime.ToString())
					$report[$key] = $row
				}
			}
		}
		$collection = $collectionImpl.ReadNextTasks($tasknumber)
	}
	$collectionImpl.DestroyCollector()

	# Get the guest's snapshots and add the user
	$snapshotsExtra = $snap | % {
		$key = $_.vm.Name + "&" + ($_.Created.ToUniversalTime().ToString())
		$str = $report | Out-String
		if($report.ContainsKey($key)){
			$_ | Add-Member -MemberType NoteProperty -Name Creator -Value $report[$key].User
		}
		$_
	}
	$snapshotsExtra
}
 
Function SnapMail ($Mailto, $snapshot)
{
   $msg = new-object Net.Mail.MailMessage
   $smtp = new-object Net.Mail.SmtpClient($smtpServer)
   $msg.From = $MailFrom
   $msg.to.Add($Mailto)
   $msg.Bcc.Add("Dylan.Hai@activenetwork.com,John.yang@activenetwork.com,Shayne.Niu@activenetwork.com,Cookies.Zhang@activenetwork.com,Mary.Xu@activenetwork.com")
  

 
   $msg.Subject = "Snapshot Reminder"
 
$MailText = @"
This email is generated by system automatically,please contact us if you have any questions about this.

This is a reminder that you have a snapshot active on virtual machine $($snapshot.VM), which was taken on $($snapshot.Created) and overed $($overdays) days.

The datastore`s performance and capacity will be impacted when the you keep the snapshot more 48 hours.

Please submit a backup ticket for this server, if you want to rollback the whole system status before 48 hours.

Please delete it if it's not used any more.

Please use VMware snapshot responsibly, Snapshots are not backups.

http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1025279


Here is the Snapshot info,

VM Location : $($VC)

VM name: $($snapshot.VM)

Name: $($snapshot.Name)

OldDays: $overdays
 
Description: $($snapshot.Description)
"@
 
   $msg.Body = $MailText
   $smtp.Send($msg)
}
 

#######################################
# Credential to Access Virtual Center
#######################################

$use = "tan\vmadmin" #svc.virtualcenter has only read access to Virtual Center
#$use = "TAN\svc.virtualcenter" #svc.virtualcenter has only read access to Virtual Center
$CredsFile = "D:\schedule_task\keys\vmadmin.key"
$pass = Get-Content $CredsFile | ConvertTo-SecureString
$Cred = New-Object -typename System.Management.Automation.PSCredential -argumentlist $use,$pass


#######################################
# Virtual Centers
#######################################
$VCs = "xavc01.active.tan","vcwest.active.tan","vceast.active.tan","vcnorth.active.tan","vcnorthdr.active.tan"
#$VCs = "xavc01.active.tan"

Foreach ($VC in $VCs ) {
 
 Connect-VIServer -Server $VC -Credential $Cred

foreach ($snap in (Get-VM | Get-Snapshot | Where {$_.Created -lt ((Get-Date).AddDays(-1))})){
   $SnapshotInfo = Get-SnapshotExtra $snap
   $time_stamp = get-date
   $overdays = ($time_stamp - $SnapshotInfo.Created).Days
   #auto remove over 10 dy
   $mail_domain = "@activenetwork.com"
   $mail_user =  Find-User $SnapshotInfo.Creator
   $mailto = (($mail_user.Properties.cn -replace (" ","."))|Out-String).ToString().Trim() + $mail_domain
   SnapMail $mailto $SnapshotInfo
}

Disconnect-VIServer $VC -Confirm:$false

}